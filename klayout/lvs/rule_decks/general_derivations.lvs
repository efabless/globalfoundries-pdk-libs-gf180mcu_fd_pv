################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#==================================
# ------ GENERAL DERIVATIONS ------
#==================================

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

ngate           = nplus.and(tgate)
nsd             = ncomp.outside(nwell).interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.outside(nwell).outside(dnwell).not(res_mk)

pgate           = pplus.and(tgate)
psd             = pcomp.and(nwell).interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.and(nwell).not(res_mk)

ngate_dw        = ngate.and(lvpwell).and(dnwell)
ptap_dw         = pcomp.and(lvpwell).and(dnwell).outside(well_diode_mk).not(res_mk)

pgate_dw        = pgate.and(dnwell).not(lvpwell)
ntap_dw         = ncomp.not(lvpwell).and(dnwell).not(res_mk)

psd_dw          = pcomp.not(lvpwell).and(dnwell).interacting(pgate).not(pgate).not(res_mk)
nwell_con       = nwell.not(res_mk)
lvpwell_con     = lvpwell.not(res_mk)
poly2_con       = poly2.not(res_mk).not(plfuse)

pgate_lv_base = pgate.not(v5_xtor).not(dualgate)
pgate_5v_base = pgate.and(v5_xtor).and(dualgate)
pgate_6v_base = pgate.not(v5_xtor).and(dualgate)

pgate_lv_n_dw = pgate_lv_base.not(dnwell)
pgate_5v_n_dw = pgate_5v_base.not(dnwell)
pgate_6v_n_dw = pgate_6v_base.not(dnwell)

pgate_lv_dw_base = pgate_lv_base.and(pgate_dw)
pgate_5v_dw_base = pgate_5v_base.and(pgate_dw)
pgate_6v_dw_base = pgate_6v_base.and(pgate_dw)

ngate_lv_base = ngate.not(v5_xtor).not(dualgate)
ngate_5v_base = ngate.and(v5_xtor).and(dualgate)
ngate_6v_base = ngate.not(v5_xtor).and(dualgate)

ngate_lv_n_dw = ngate_lv_base.not(dnwell)
ngate_5v_n_dw = ngate_5v_base.not(dnwell)
ngate_6v_n_dw = ngate_6v_base.not(dnwell)

ngate_lv_dw_base = ngate_lv_base.and(ngate_dw)
ngate_5v_dw_base = ngate_5v_base.and(ngate_dw)
ngate_6v_dw_base = ngate_6v_base.and(ngate_dw)

metal1_con      = metal1.not(metal1_res)
metal2_con      = metal2.not(metal2_res)
metal3_con      = metal3.not(metal3_res) if METAL_LEVEL != '2LM'

case METAL_LEVEL
when '2LM'
  top_metal_con = metal2_con
when '3LM'
  top_metal_con = metal3_con
when '4LM'
  top_metal_con = metal4.not(metal4_res)
when '5LM'
  top_metal_con = metal5.not(metal5_res)
when '6LM'
  top_metal_con = metaltop.not(metal6_res)
else
  logger.error("Unknown metal stack #{METAL_LEVEL}")
  raise
end