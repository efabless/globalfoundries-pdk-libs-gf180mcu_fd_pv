################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

#=======================================================================================================================
#--------------------------------------------- GF 0.18um MCU LVS RULE DECK ---------------------------------------------
#=======================================================================================================================
require 'time'
require 'logger'
require 'etc'

exec_start_time = Time.now

logger = Logger.new($stdout)

logger.formatter = proc do |_severity, datetime, _progname, msg|
  "#{datetime}: Memory Usage (" + `pmap #{Process.pid} | tail -1`[10, 40].strip + ") : #{msg}
"
end

#================================================
#----------------- FILE SETUP -------------------
#================================================
logger.info("Starting running GF180MCU Klayout LVS runset on #{$input}")
logger.info("Ruby Version for klayout: #{RUBY_VERSION}")

if $input
  if $topcell
    source($input, $topcell)
  else
    source($input)
  end
end

logger.info('Loading database to memory is complete.')

if $report
  logger.info("GF180MCU Klayout LVS runset output at: #{$report}")
  report_lvs($report)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  report_path = layout_dir.join("#{source.cell_name}.lvsdb").to_s
  logger.info("GF180MCU Klayout LVS runset output at default location: #{source.cell_name}.lvsdb")
  report_lvs($report_path)
end

if $target_netlist
  logger.info("LVS extracted netlist at: #{$target_netlist}")
  target_netlist($target_netlist)
else
  layout_dir = Pathname.new(RBA::CellView.active.filename).parent.realpath
  netlist_path = layout_dir.join("#{source.cell_name}_extracted.cir").to_s
  logger.info("GF180MCU Klayout LVS extracted netlist file at: #{source.cell_name}_extracted.cir")
  target_netlist($netlist_path,
                 write_spice(spice_with_net_names, spice_with_comments), 'Extracted by KLayout with GF180 LVS runset')
end

#================================================
#------------------ SWITCHES --------------------
#================================================
logger.info('Evaluate switches.')

def bool_check?(obj)
  obj.to_s.downcase == 'true'
end

#=== GET SUBSTRATE NAME ===
substrate_name = $lvs_sub || 'gf180mcu_gnd'

logger.info("Substrate name used: #{$lvs_sub}")

#=== NET NAMES OPTION ===
# true: use net names instead of numbers
# false: use numbers for nets
SPICE_WITH_NET_NAMES = bool_check?($spice_net_names)

logger.info("Extracted netlist with net names: #{SPICE_WITH_NET_NAMES}")

#=== COMMENTS OPTION ===
# true: put in comments with details
# false: no comments
SPICE_WITH_COMMENTS = bool_check?($spice_comments)

logger.info("Extracted netlist with comments in details: #{SPICE_WITH_COMMENTS}")

#=== EXTRACTION SCALE ===
DEV_SCALE = bool_check?($scale)

device_scaling(1_000_000) if $DEV_SCALE

logger.info("LVS device_scaling option: #{DEV_SCALE}")

# SCH_SIMPLE
SCH_SIMPLE = bool_check?($schematic_simplify)

logger.info("Selected SCH_SIMPLE option: #{SCH_SIMPLE}")

# NET_ONLY
NET_ONLY = bool_check?($net_only)

logger.info("Selected NET_ONLY option: #{NET_ONLY}")

# NET_ONLY
NET_ONLY = bool_check?($net_only)

logger.info("Selected NET_ONLY option: #{NET_ONLY}")

# TOP_LVL_PINS
TOP_LVL_PINS = bool_check?($top_lvl_pins)

logger.info("Selected TOP_LVL_PINS option: #{TOP_LVL_PINS}")

# COMBINE
COMBINE = bool_check?($combine)

logger.info("Selected COMBINE option: #{COMBINE}")

# PURGE
PURGE = bool_check?($purge)

logger.info("Selected PURGE option: #{PURGE}")

# PURGE_NETS
PURGE_NETS = bool_check?($purge_nets)

logger.info("Selected PURGE_NETS option: #{PURGE_NETS}")

# SIMPLIFY
SIMPLIFY = if $net_only || $top_lvl_pins || $combine || $purge || $purge_nets
             false
           else
             true
           end

logger.info("Selected SIMPLIFY option: #{SIMPLIFY}")

#=== PRINT DETAILS ===
logger.info("Verbose mode: #{$verbose}")
if $verbose == 'true'
  verbose(true)
else
  verbose(false)
end

# === TILING MODE ===
case $run_mode
when 'tiling'
  tiles(500.um)
  tile_borders(10.um)
  logger.info('Tiling  mode is enabled.')

when 'deep'
  #=== HIER MODE ===
  deep
  logger.info('deep  mode is enabled.')
else
  #=== FLAT MODE ===
  flat
  logger.info('flat  mode is enabled.')
end

# METAL_TOP
METAL_TOP = $metal_top || '9K'

logger.info("METAL_TOP Selected is #{METAL_TOP}")

# METAL_LEVEL
METAL_LEVEL = $metal_level || '6LM'

logger.info("METAL_STACK Selected is #{METAL_LEVEL}")

# POLY_RES
POLY_RES = $poly_res || '1k'

logger.info("POLY_RES Selected is #{POLY_RES}")

# MIM
MIM_OPTION = $mim_option || 'B'

logger.info("MIM Option selected: #{MIM_OPTION}")

# MIM
MIM_CAP = $mim_cap || '2'

logger.info("MIM CAP selected: #{MIM_CAP}")

#================================================
#------------- METAL LEVEL SWITCHES -------------
#================================================

case MIM_OPTION
when 'A'
  cap_mim1f0 = 'cap_mim_1f0_m2m3_noshield'
  cap_mim1f5 = 'cap_mim_1f5_m2m3_noshield'
  cap_mim2f0 = 'cap_mim_2f0_m2m3_noshield'
when 'B'
  case METAL_LEVEL
    when '6LM'
      cap_mim1f0 = 'cap_mim_1f0_m5m6_noshield'
      cap_mim1f5 = 'cap_mim_1f5_m5m6_noshield'
      cap_mim2f0 = 'cap_mim_2f0_m5m6_noshield'
    when '5LM'
      cap_mim1f0 = 'cap_mim_1f0_m4m5_noshield'
      cap_mim1f5 = 'cap_mim_1f5_m4m5_noshield'
      cap_mim2f0 = 'cap_mim_2f0_m4m5_noshield'
    when '4LM'
      cap_mim1f0 = 'cap_mim_1f0_m3m4_noshield'
      cap_mim1f5 = 'cap_mim_1f5_m3m4_noshield'
      cap_mim2f0 = 'cap_mim_2f0_m3m4_noshield'
    end
end

#================================================
# --------------- CUSTOM CLASSES ----------------
#================================================

#=========== CUSTOM READER ===========
class SubcircuitModelsReader < RBA::NetlistSpiceReaderDelegate
  def parse_element(sup, element)
    case element
    when 'C'
      super("#{sup} C=2e-16", element)
    when 'R'
      super("#{sup} R=0", element)
    else
      super
    end
  end

  # implements the delegate interface:
  # take and translate the element
  def element(circuit, ele, name, model, value, nets, params)
    case ele
    when 'C'
      error('Capacitor needs two nodes') if nets.size != 2

      # provide a device class
      cls = circuit.netlist.device_class_by_name(model)
      unless cls
        cls = RBA::DeviceClassCapacitor.new
        cls.name = model
        circuit.netlist.add(cls)
      end

      # create a device
      device = circuit.create_device(cls, name)

      # and configure the device
      %w[A B].each_with_index do |t, index|
        device.connect_terminal(t, nets[index])
      end

      # parameters in the model are given in micrometer units, so
      # we need to translate the parameter values from SI to um values:
      device.set_parameter('A', ((params['W'] || 0.0) * (params['L'] || 0.0)) * 1e12)
      device.set_parameter('P', ((params['W'] || 0.0) + (params['L'] || 0.0)) * 2e6)
      device.set_parameter('C', (params['C'] || 0.0))

    when 'R'
      case nets.size
      when 3
        # provide a device class
        cls = circuit.netlist.device_class_by_name(model)
        unless cls
          cls = RBA::DeviceClassResistorWithBulk.new
          cls.name = model
          circuit.netlist.add(cls)
        end

        # create a device
        device = circuit.create_device(cls, name)

        # and configure the device
        %w[A B W].each_with_index do |t, index|
          device.connect_terminal(t, nets[index])
        end

      when 2
        # provide a device class
        cls = circuit.netlist.device_class_by_name(model)
        unless cls
          cls = RBA::DeviceClassResistor.new
          cls.name = model
          circuit.netlist.add(cls)
        end

        # create a device
        device = circuit.create_device(cls, name)

        # and configure the device
        %w[A B].each_with_index do |t, index|
          device.connect_terminal(t, nets[index])
        end

      else
        error('Resistor needs two or three nodes')

      end

      # parameters in the model are given in micrometer units, so
      # we need to translate the parameter values from SI to um values:
      device.set_parameter('W', ((params['W'] || 0.0) * (params['PAR'] || 1.0)) * 1e6)
      device.set_parameter('L', ((params['L'] || 0.0) * (params['S'] || 1.0)) * 1e6)
      device.set_parameter('R', (params['R'] * (params['S'] || 1.0) / (params['PAR'] || 1.0)))

    else
      return super

    end
    true
  end
end

# Instantiate a reader using the new delegate
reader = RBA::NetlistSpiceReader.new(SubcircuitModelsReader.new)

#=== GET NETLIST ===
if $schematic
  schematic($schematic, reader)
  logger.info("Netlist file: #{$schematic}")
else
  begin
    schematic("#{source.cell_name}.cdl", reader)
    logger.info("Netlist file: #{source.cell_name}.cdl")
  rescue StandardError
    puts 'No schematic loaded , please add your netlist file'
    logger.error('No schematic loaded , please add your netlist file')
  end
end

# 4 terminals resistor device extractor
class BResistor < RBA::DeviceClassResistorWithBulk
  def initialize
    super
    enable_parameter('R', false)
    enable_parameter('W', true)
    enable_parameter('L', true)
  end
end

# 3 terminals resistor device extractor
class NResistor < RBA::DeviceClassResistor
  def initialize
    super
    enable_parameter('R', false)
    enable_parameter('W', true)
    enable_parameter('L', true)
  end
end

# MosCap device extractor
class MosCap < RBA::DeviceClassCapacitor
  def initialize
    super
    enable_parameter('C', false)
    enable_parameter('A', true)
    enable_parameter('P', true)
  end
end

# MIMCAP device extractor
class MIMCap < RBA::DeviceClassCapacitor
  def initialize
    super
    enable_parameter('C', true)
    enable_parameter('A', true)
    enable_parameter('P', true)
  end
end

#================================================
#------------- LAYERS DERIVATIONS ---------------
#================================================
polygons_count = 0
logger.info('Read in polygons from layers.')

def get_polygons(layer, data_type)
  ps = polygons(layer, data_type)
  $run_mode == 'deep' ? ps : ps.merged
end

comp = get_polygons(22, 0)
count = comp.count
logger.info("comp has #{count} polygons")
polygons_count += count

dnwell = get_polygons(12, 0)
count = dnwell.count
logger.info("dnwell has #{count} polygons")
polygons_count += count

nwell = get_polygons(21, 0)
count = nwell.count
logger.info("nwell has #{count} polygons")
polygons_count += count

lvpwell = get_polygons(204, 0)
count = lvpwell.count
logger.info("lvpwell has #{count} polygons")
polygons_count += count

dualgate = get_polygons(55, 0)
count = dualgate.count
logger.info("dualgate has #{count} polygons")
polygons_count += count

poly2 = get_polygons(30, 0)
count = poly2.count
logger.info("poly2 has #{count} polygons")
polygons_count += count

nplus = get_polygons(32, 0)
count = nplus.count
logger.info("nplus has #{count} polygons")
polygons_count += count

pplus = get_polygons(31, 0)
count = pplus.count
logger.info("pplus has #{count} polygons")
polygons_count += count

sab = get_polygons(49, 0)
count = sab.count
logger.info("sab has #{count} polygons")
polygons_count += count

esd = get_polygons(24, 0)
count = esd.count
logger.info("esd has #{count} polygons")
polygons_count += count

resistor = get_polygons(62, 0)
count = resistor.count
logger.info("resistor has #{count} polygons")
polygons_count += count

fhres = get_polygons(227, 0)
count = fhres.count
logger.info("fhres has #{count} polygons")
polygons_count += count

fusetop = get_polygons(75, 0)
count = fusetop.count
logger.info("fusetop has #{count} polygons")
polygons_count += count

fusewindow_d = get_polygons(96, 1)
count = fusewindow_d.count
logger.info("fusewindow_d has #{count} polygons")
polygons_count += count

polyfuse = get_polygons(220, 0)
count = polyfuse.count
logger.info("polyfuse has #{count} polygons")
polygons_count += count

mvsd = get_polygons(210, 0)
count = mvsd.count
logger.info("mvsd has #{count} polygons")
polygons_count += count

mvpsd = get_polygons(11, 39)
count = mvpsd.count
logger.info("mvpsd has #{count} polygons")
polygons_count += count

nat = get_polygons(5, 0)
count = nat.count
logger.info("nat has #{count} polygons")
polygons_count += count

comp_dummy = get_polygons(22, 4)
count = comp_dummy.count
logger.info("comp_dummy has #{count} polygons")
polygons_count += count

poly2_dummy = get_polygons(30, 4)
count = poly2_dummy.count
logger.info("poly2_dummy has #{count} polygons")
polygons_count += count

schottky_diode = get_polygons(241, 0)
count = schottky_diode.count
logger.info("schottky_diode has #{count} polygons")
polygons_count += count

zener = get_polygons(178, 0)
count = zener.count
logger.info("zener has #{count} polygons")
polygons_count += count

res_mk = get_polygons(110, 5)
count = res_mk.count
logger.info("res_mk has #{count} polygons")
polygons_count += count

opc_drc = get_polygons(124, 5)
count = opc_drc.count
logger.info("opc_drc has #{count} polygons")
polygons_count += count

ndmy = get_polygons(111, 5)
count = ndmy.count
logger.info("ndmy has #{count} polygons")
polygons_count += count

pmndmy = get_polygons(152, 5)
count = pmndmy.count
logger.info("pmndmy has #{count} polygons")
polygons_count += count

v5_xtor = get_polygons(112, 1)
count = v5_xtor.count
logger.info("v5_xtor has #{count} polygons")
polygons_count += count

cap_mk = get_polygons(117, 5)
count = cap_mk.count
logger.info("cap_mk has #{count} polygons")
polygons_count += count

mos_cap_mk = get_polygons(166, 5)
count = mos_cap_mk.count
logger.info("mos_cap_mk has #{count} polygons")
polygons_count += count

ind_mk = get_polygons(151, 5)
count = ind_mk.count
logger.info("ind_mk has #{count} polygons")
polygons_count += count

diode_mk = get_polygons(115, 5)
count = diode_mk.count
logger.info("diode_mk has #{count} polygons")
polygons_count += count

drc_bjt = get_polygons(127, 5)
count = drc_bjt.count
logger.info("drc_bjt has #{count} polygons")
polygons_count += count

lvs_bjt = get_polygons(118, 5)
count = lvs_bjt.count
logger.info("lvs_bjt has #{count} polygons")
polygons_count += count

mim_l_mk = get_polygons(117, 10)
count = mim_l_mk.count
logger.info("mim_l_mk has #{count} polygons")
polygons_count += count

latchup_mk = get_polygons(137, 5)
count = latchup_mk.count
logger.info("latchup_mk has #{count} polygons")
polygons_count += count

guard_ring_mk = get_polygons(167, 5)
count = guard_ring_mk.count
logger.info("guard_ring_mk has #{count} polygons")
polygons_count += count

otp_mk = get_polygons(173, 5)
count = otp_mk.count
logger.info("otp_mk has #{count} polygons")
polygons_count += count

mtpmark = get_polygons(122, 5)
count = mtpmark.count
logger.info("mtpmark has #{count} polygons")
polygons_count += count

neo_ee_mk = get_polygons(88, 17)
count = neo_ee_mk.count
logger.info("neo_ee_mk has #{count} polygons")
polygons_count += count

sramcore = get_polygons(108, 5)
count = sramcore.count
logger.info("sramcore has #{count} polygons")
polygons_count += count

lvs_rf = get_polygons(100, 5)
count = lvs_rf.count
logger.info("lvs_rf has #{count} polygons")
polygons_count += count

lvs_drain = get_polygons(100, 7)
count = lvs_drain.count
logger.info("lvs_drain has #{count} polygons")
polygons_count += count

ind_mk = get_polygons(151, 5)
count = ind_mk.count
logger.info("ind_mk has #{count} polygons")
polygons_count += count

hvpolyrs = get_polygons(123, 5)
count = hvpolyrs.count
logger.info("hvpolyrs has #{count} polygons")
polygons_count += count

lvs_io = get_polygons(119, 5)
count = lvs_io.count
logger.info("lvs_io has #{count} polygons")
polygons_count += count

probe_mk = get_polygons(13, 17)
count = probe_mk.count
logger.info("probe_mk has #{count} polygons")
polygons_count += count

esd_mk = get_polygons(24, 5)
count = esd_mk.count
logger.info("esd_mk has #{count} polygons")
polygons_count += count

lvs_source = get_polygons(100, 8)
count = lvs_source.count
logger.info("lvs_source has #{count} polygons")
polygons_count += count

well_diode_mk = get_polygons(153, 51)
count = well_diode_mk.count
logger.info("well_diode_mk has #{count} polygons")
polygons_count += count

ldmos_xtor = get_polygons(226, 0)
count = ldmos_xtor.count
logger.info("ldmos_xtor has #{count} polygons")
polygons_count += count

plfuse = get_polygons(125, 5)
count = plfuse.count
logger.info("plfuse has #{count} polygons")
polygons_count += count

efuse_mk = get_polygons(80, 5)
count = efuse_mk.count
logger.info("efuse_mk has #{count} polygons")
polygons_count += count

mcell_feol_mk = get_polygons(11, 17)
count = mcell_feol_mk.count
logger.info("mcell_feol_mk has #{count} polygons")
polygons_count += count

ymtp_mk = get_polygons(86, 17)
count = ymtp_mk.count
logger.info("ymtp_mk has #{count} polygons")
polygons_count += count

dev_wf_mk = get_polygons(128, 17)
count = dev_wf_mk.count
logger.info("dev_wf_mk has #{count} polygons")
polygons_count += count

comp_label = labels(22, 10)
count = comp_label.count
logger.info("comp_label has #{count} polygons")
polygons_count += count

poly2_label = labels(30, 10)
count = poly2_label.count
logger.info("poly2_label has #{count} polygons")
polygons_count += count

mdiode = get_polygons(116, 5)
count = mdiode.count
logger.info("mdiode has #{count} polygons")
polygons_count += count

contact = get_polygons(33, 0)
count = contact.count
logger.info("contact has #{count} polygons")
polygons_count += count

metal1_drawn = get_polygons(34, 0)
count = metal1_drawn.count
logger.info("metal1_drawn has #{count} polygons")
polygons_count += count

metal1_dummy = get_polygons(34, 4)
count = metal1_dummy.count
logger.info("metal1_dummy has #{count} polygons")
polygons_count += count

metal1         = metal1_drawn + metal1_dummy

metal1_label = labels(34, 10)
count = metal1_label.count
logger.info("metal1_label has #{count} polygons")
polygons_count += count

metal1_slot = get_polygons(34, 3)
count = metal1_slot.count
logger.info("metal1_slot has #{count} polygons")
polygons_count += count

metal1_blk = get_polygons(34, 5)
count = metal1_blk.count
logger.info("metal1_blk has #{count} polygons")
polygons_count += count

via1 = get_polygons(35, 0)
count = via1.count
logger.info("via1 has #{count} polygons")
polygons_count += count

metal2_drawn = get_polygons(36, 0)
count = metal2_drawn.count
logger.info("metal2_drawn has #{count} polygons")
polygons_count += count

metal2_dummy = get_polygons(36, 4)
count = metal2_dummy.count
logger.info("metal2_dummy has #{count} polygons")
polygons_count += count

metal2 = metal2_drawn + metal2_dummy

metal2_label = labels(36, 10)
count = metal2_label.count
logger.info("metal2_label has #{count} polygons")
polygons_count += count

metal2_slot = get_polygons(36, 3)
count = metal2_slot.count
logger.info("metal2_slot has #{count} polygons")
polygons_count += count

metal2_blk = get_polygons(36, 5)
count = metal2_blk.count
logger.info("metal2_blk has #{count} polygons")
polygons_count += count

if METAL_LEVEL == '2LM'

  top_via       = via1
  topmin1_via   = contact
  top_metal     = metal2
  topmin1_metal = metal1

else

  via2 = get_polygons(38, 0)
  count = via2.count
  logger.info("via2 has #{count} polygons")
  polygons_count += count

  metal3_drawn = get_polygons(42, 0)
  count = metal3_drawn.count
  logger.info("metal3_drawn has #{count} polygons")
  polygons_count += count

  metal3_dummy = get_polygons(42, 4)
  count = metal3_dummy.count
  logger.info("metal3_dummy has #{count} polygons")
  polygons_count += count

  metal3 = metal3_drawn + metal3_dummy

  metal3_label = labels(42, 10)
  count = metal3_label.count
  logger.info("metal3_label has #{count} polygons")
  polygons_count += count

  metal3_slot = get_polygons(42, 3)
  count = metal3_slot.count
  logger.info("metal3_slot has #{count} polygons")
  polygons_count += count

  metal3_blk = get_polygons(42, 5)
  count = metal3_blk.count
  logger.info("metal3_blk has #{count} polygons")
  polygons_count += count

  if METAL_LEVEL == '3LM'

    top_via       = via2
    topmin1_via   = via1
    top_metal     = metal3
    topmin1_metal = metal2
  else

    via3 = get_polygons(40, 0)
    count = via3.count
    logger.info("via3 has #{count} polygons")
    polygons_count += count

    metal4_drawn = get_polygons(46, 0)
    count = metal4_drawn.count
    logger.info("metal4_drawn has #{count} polygons")
    polygons_count += count

    metal4_dummy = get_polygons(46, 4)
    count = metal4_dummy.count
    logger.info("metal4_dummy has #{count} polygons")
    polygons_count += count

    metal4 = metal4_drawn + metal4_dummy

    metal4_label = labels(46, 10)
    count = metal4_label.count
    logger.info("metal4_label has #{count} polygons")
    polygons_count += count

    metal4_slot = get_polygons(46, 3)
    count = metal4_slot.count
    logger.info("metal4_slot has #{count} polygons")
    polygons_count += count

    metal4_blk = get_polygons(46, 5)
    count = metal4_blk.count
    logger.info("metal4_blk has #{count} polygons")
    polygons_count += count

    if METAL_LEVEL == '4LM'

      top_via       = via3
      topmin1_via   = via2
      top_metal     = metal4
      topmin1_metal = metal3
    else

      via4 = get_polygons(41, 0)
      count = via4.count
      logger.info("via4 has #{count} polygons")
      polygons_count += count

      case METAL_LEVEL
      when '5LM'
        metal5_drawn = get_polygons(81, 0)
        count = metal5_drawn.count
        logger.info("metal5_drawn has #{count} polygons")
        polygons_count += count

        metal5_dummy = get_polygons(81, 4)
        count = metal5_dummy.count
        logger.info("metal5_dummy has #{count} polygons")
        polygons_count += count

        metal5 = metal5_drawn + metal5_dummy

        metal5_label = labels(81, 10)
        count = metal5_label.count
        logger.info("metal5_label has #{count} polygons")
        polygons_count += count

        metal5_slot = get_polygons(81, 3)
        count = metal5_slot.count
        logger.info("metal5_slot has #{count} polygons")
        polygons_count += count

        metal5_blk = get_polygons(81, 5)
        count = metal5_blk.count
        logger.info("metal5_blk has #{count} polygons")
        polygons_count += count

        top_via       = via4
        topmin1_via   = via3
        top_metal     = metal5
        topmin1_metal = metal4
      when '6LM'
        metal5_drawn = get_polygons(81, 0)
        count = metal5_drawn.count
        logger.info("metal5_drawn has #{count} polygons")
        polygons_count += count

        metal5_dummy = get_polygons(81, 4)
        count = metal5_dummy.count
        logger.info("metal5_dummy has #{count} polygons")
        polygons_count += count

        metal5         = metal5_drawn + metal5_dummy

        metal5_label = labels(81, 10)
        count = metal5_label.count
        logger.info("metal5_label has #{count} polygons")
        polygons_count += count

        metal5_slot = get_polygons(81, 3)
        count = metal5_slot.count
        logger.info("metal5_slot has #{count} polygons")
        polygons_count += count

        metal5_blk = get_polygons(81, 5)
        count = metal5_blk.count
        logger.info("metal5_blk has #{count} polygons")
        polygons_count += count

        via5 = get_polygons(82, 0)
        count = via5.count
        logger.info("via5 has #{count} polygons")
        polygons_count += count

        metaltop_drawn = get_polygons(53, 0)
        count = metaltop_drawn.count
        logger.info("metaltop_drawn has #{count} polygons")
        polygons_count += count

        metaltop_dummy = get_polygons(53, 4)
        count = metaltop_dummy.count
        logger.info("metaltop_dummy has #{count} polygons")
        polygons_count += count

        metaltop       = metaltop_drawn + metaltop_dummy

        metaltop_label = labels(53, 10)
        count = metaltop_label.count
        logger.info("metaltop_label has #{count} polygons")
        polygons_count += count

        metaltop_slot = get_polygons(53, 3)
        count = metaltop_slot.count
        logger.info("metaltop_slot has #{count} polygons")
        polygons_count += count

        metalt_blk = get_polygons(53, 5)
        count = metalt_blk.count
        logger.info("metalt_blk has #{count} polygons")
        polygons_count += count

        top_via       = via5
        topmin1_via   = via4
        top_metal     = metaltop
        topmin1_metal = metal5
      else
        logger.error("Unknown metal stack #{METAL_LEVEL}")
        raise
      end
    end
  end
end

pad = get_polygons(37, 0)
count = pad.count
logger.info("pad has #{count} polygons")
polygons_count += count

ubmpperi = get_polygons(183, 0)
count = ubmpperi.count
logger.info("ubmpperi has #{count} polygons")
polygons_count += count

ubmparray = get_polygons(184, 0)
count = ubmparray.count
logger.info("ubmparray has #{count} polygons")
polygons_count += count

ubmeplate = get_polygons(185, 0)
count = ubmeplate.count
logger.info("ubmeplate has #{count} polygons")
polygons_count += count

metal1_res = get_polygons(110, 11)
count = metal1_res.count
logger.info("metal1_res has #{count} polygons")
polygons_count += count

metal2_res = get_polygons(110, 12)
count = metal2_res.count
logger.info("metal2_res has #{count} polygons")
polygons_count += count

metal3_res = get_polygons(110, 13)
count = metal3_res.count
logger.info("metal3_res has #{count} polygons")
polygons_count += count

metal4_res = get_polygons(110, 14)
count = metal4_res.count
logger.info("metal4_res has #{count} polygons")
polygons_count += count

metal5_res = get_polygons(110, 15)
count = metal5_res.count
logger.info("metal5_res has #{count} polygons")
polygons_count += count

metal6_res = get_polygons(110, 16)
count = metal6_res.count
logger.info("metal6_res has #{count} polygons")
polygons_count += count

pr_bndry = get_polygons(0, 0)
count = pr_bndry.count
logger.info("pr_bndry has #{count} polygons")
polygons_count += count

border = get_polygons(63, 0)
count = border.count
logger.info("border has #{count} polygons")
polygons_count += count
logger.info("Total no. of polygons in the design is #{polygons_count}")

logger.info('Starting deriving base layers.')

#=== BULK LAYER ===
sub = polygon_layer

#================================================================
#------------------------- MAIN RUNSET --------------------------
#================================================================

logger.info('GF180 LVS rules started')

#================================================
#------------- LAYERS DERIVATIONS ---------------
#================================================

logger.info('Starting deriving base layers.')

#==================================
# ------ GENERAL DERIVATIONS ------
#==================================

ncomp           = comp.and(nplus)
pcomp           = comp.and(pplus)
tgate           = poly2.and(comp).not(res_mk)

ngate           = nplus.and(tgate)
nsd             = ncomp.outside(nwell).interacting(ngate).not(ngate).not(res_mk)
ptap            = pcomp.outside(nwell).outside(dnwell).not(res_mk)

pgate           = pplus.and(tgate)
psd             = pcomp.inside(nwell).interacting(pgate).not(pgate).not(res_mk)
ntap            = ncomp.inside(nwell).not(res_mk)

ngate_dw        = ngate.and(lvpwell).and(dnwell)
ptap_dw         = pcomp.inside(lvpwell).inside(dnwell).outside(well_diode_mk).not(res_mk)

pgate_dw        = pgate.inside(dnwell).outside(lvpwell)
ntap_dw         = ncomp.outside(lvpwell).inside(dnwell).not(res_mk)

psd_dw          = pcomp.not(lvpwell).and(dnwell).interacting(pgate).not(pgate).not(res_mk)
nwell_con       = nwell.not(res_mk)
lvpwell_con     = lvpwell.not(res_mk)
poly2_con       = poly2.not(res_mk).not(plfuse)

metal1_con      = metal1.not(metal1_res)
metal2_con      = metal2.not(metal2_res)

metal3_con      = metal3.not(metal3_res) if METAL_LEVEL != '2LM'

metaltop_con = metaltop.not(metal6_res) if METAL_LEVEL == '6LM'

#==================================
# ------ MOSFET DERIVATIONS -------
#==================================

logger.info('Starting MOSFET DERIVATIONS')

# ==============
# ---- PMOS ----
# ==============
logger.info('Starting PMOS layers DERIVATIONS')

# 3.3V PMOS transistor outside DNWELL
pgate_3p3v = pgate.not(v5_xtor).not(dualgate).not(dnwell).not(sab).not_interacting(mos_cap_mk)

# 5V PMOS transistor outside DNWELL
pgate_5v = pgate.and(v5_xtor).and(dualgate).not(dnwell).not(sab).not_interacting(mos_cap_mk)

# 6V PMOS transistor outside DNWELL
pgate_6v = pgate.not(v5_xtor).and(dualgate).not(nat).not(ldmos_xtor).not(dnwell).not(sab).not_interacting(mos_cap_mk)

# 3.3V PMOS transistor inside DNWELL
pgate_3p3v_dw = pgate_dw.not(v5_xtor).not(dualgate).not(sab).not_interacting(mos_cap_mk)

# 5V PMOS transistor inside DNWELL
pgate_5v_dw = pgate_dw.and(v5_xtor).and(dualgate).not(sab).not_interacting(mos_cap_mk)

# 6V PMOS transistor inside DNWELL
pgate_6v_dw = pgate_dw.not(v5_xtor).and(dualgate).not(nat).not(ldmos_xtor).not(sab).not_interacting(mos_cap_mk)

# LDPMOS transistor
pgate_ldmos = pgate_dw.interacting(mvpsd).not(v5_xtor).and(dualgate)
                      .and(ldmos_xtor).and(dnwell).not(mvpsd).not_interacting(mos_cap_mk)
pd_ldmos    = psd_dw.not(v5_xtor).and(dualgate).and(ldmos_xtor).and(dnwell).and(mvpsd)
ps_ldmos    = psd_dw.not(v5_xtor).and(dualgate).and(ldmos_xtor).and(dnwell).not(mvpsd)
psd_ldmos   = pcomp.not(v5_xtor).and(dualgate).and(ldmos_xtor).and(dnwell)
                   .interacting(mvpsd).sized(0.29.um).sized(-0.29.um).extents.not(pgate_ldmos)

# ==============
# ---- NMOS ----
# ==============
logger.info('Starting NMOS layers DERIVATIONS')

# 3.3V NMOS transistor outside DNWELL
ngate_3p3v = ngate.not(v5_xtor).not(dualgate).not(dnwell).not(sab).not_interacting(mos_cap_mk)

# 5V NMOS transistor outside DNWELL
ngate_5v = ngate.and(v5_xtor).and(dualgate).not(dnwell).not(sab).not_interacting(mos_cap_mk)

# 6V NMOS transistor outside DNWELL
ngate_6v = ngate.not(v5_xtor).and(dualgate).not(nat).not(ldmos_xtor).not(dnwell).not(sab).not_interacting(mos_cap_mk)

# 3.3V NMOS transistor inside DNWELL
ngate_3p3v_dw = ngate_dw.not(v5_xtor).not(dualgate).not(sab).not_interacting(mos_cap_mk)

# 5V NMOS transistor inside DNWELL
ngate_5v_dw = ngate_dw.and(v5_xtor).and(dualgate).not(sab).not_interacting(mos_cap_mk)

# 6V NMOS transistor inside DNWELL
ngate_6v_dw = ngate_dw.not(v5_xtor).and(dualgate).not(nat).not(ldmos_xtor).not(sab).not_interacting(mos_cap_mk)

# Native Vt NMOS transistor
ngate_nat = ngate.not(v5_xtor).and(dualgate).and(nat).not_interacting(mos_cap_mk)

# LDNMOS transistor
ngate_ldmos = ngate.interacting(mvsd).not(v5_xtor).and(dualgate)
                   .and(ldmos_xtor).not(dnwell).not(mvsd).not_interacting(mos_cap_mk)
nd_ldmos    = ncomp.not(ngate).not(v5_xtor).and(dualgate).and(ldmos_xtor).not(dnwell).and(mvsd)
ns_ldmos    = nsd.not(v5_xtor).and(dualgate).and(ldmos_xtor).not(dnwell).not(mvsd)
nsd_ldmos   = ncomp.not(v5_xtor).and(dualgate).and(ldmos_xtor).not(dnwell)
                   .interacting(mvsd).sized(0.37.um).sized(-0.37.um).extents.not(ngate_ldmos)

#================================
# ------ BJT DERIVATIONS --------
#================================
logger.info('Starting BJT DERIVATIONS')

# ==============
# ---- vnpn ----
# ==============
logger.info('Starting vnpn layers DERIVATIONS')

# vnpn general nodes DERIVATIONS
vnpn_e = ncomp.interacting(lvs_bjt).inside(dnwell)
vnpn_b = pcomp.and(lvpwell).inside(dnwell).inside(drc_bjt)
vnpn_c = ncomp.inside(dnwell).outside(lvs_bjt).inside(drc_bjt)

# npn_10p00x10p00 nodes DERIVATIONS
npn_10p00x10p00_e = vnpn_e.with_area(99.5.um, 100.5.um).interacting(vnpn_e.edges.with_length(9.8.um, 10.2.um))
npn_10p00x10p00_b = vnpn_b.interacting(vnpn_b.extents.interacting(npn_10p00x10p00_e))
npn_10p00x10p00_c = vnpn_c.interacting(vnpn_c.extents.interacting(npn_10p00x10p00_e))

# npn_05p00x05p00 nodes DERIVATIONS
npn_05p00x05p00_e = vnpn_e.with_area(24.5.um, 25.5.um).interacting(vnpn_e.edges.with_length(4.8.um, 5.2.um))
npn_05p00x05p00_b = vnpn_b.interacting(vnpn_b.extents.interacting(npn_05p00x05p00_e))
npn_05p00x05p00_c = vnpn_c.interacting(vnpn_c.extents.interacting(npn_05p00x05p00_e))

# npn_00p54x16p00 nodes DERIVATIONS
npn_00p54x16p00_e = vnpn_e.with_area(8.um, 9.um).interacting(vnpn_e.edges.with_length(15.5.um, 16.5.um))
npn_00p54x16p00_b = vnpn_b.interacting(vnpn_b.extents.interacting(npn_00p54x16p00_e))
npn_00p54x16p00_c = vnpn_c.interacting(vnpn_c.extents.interacting(npn_00p54x16p00_e))

# npn_00p54x08p00 nodes DERIVATIONS
npn_00p54x08p00_e = vnpn_e.with_area(4.um, 5.um).interacting(vnpn_e.edges.with_length(7.5.um, 8.5.um))
npn_00p54x08p00_b = vnpn_b.interacting(vnpn_b.extents.interacting(npn_00p54x08p00_e))
npn_00p54x08p00_c = vnpn_c.interacting(vnpn_c.extents.interacting(npn_00p54x08p00_e))

# npn_00p54x04p00 nodes DERIVATIONS
npn_00p54x04p00_e = vnpn_e.with_area(1.5.um, 2.5.um).interacting(vnpn_e.edges.with_length(3.8.um, 4.2.um))
npn_00p54x04p00_b = vnpn_b.interacting(vnpn_b.extents.interacting(npn_00p54x04p00_e))
npn_00p54x04p00_c = vnpn_c.interacting(vnpn_c.extents.interacting(npn_00p54x04p00_e))

# npn_00p54x02p00 nodes DERIVATIONS
npn_00p54x02p00_e = vnpn_e.with_area(0.8.um, 1.5.um).interacting(vnpn_e.edges.with_length(1.8.um, 2.2.um))
npn_00p54x02p00_b = vnpn_b.interacting(vnpn_b.extents.interacting(npn_00p54x02p00_e))
npn_00p54x02p00_c = vnpn_c.interacting(vnpn_c.extents.interacting(npn_00p54x02p00_e))

# ==============
# ---- vpnp ----
# ==============
logger.info('Starting vpnp layers DERIVATIONS')

# vpnp general nodes DERIVATIONS
vpnp_e = pcomp.inside(nwell).interacting(lvs_bjt)
vpnp_b = ncomp.and(nwell).inside(drc_bjt)
vpnp_c = ptap.outside(lvs_bjt).inside(drc_bjt)

# pnp_10p00x10p00 nodes DERIVATIONS
pnp_10p00x10p00_e = vpnp_e.with_area(99.5.um, 100.5.um).interacting(vpnp_e.edges.with_length(9.8.um, 10.2.um))
pnp_10p00x10p00_b = vpnp_b.interacting(vpnp_b.extents.interacting(pnp_10p00x10p00_e))
pnp_10p00x10p00_c = vpnp_c.interacting(vpnp_c.extents.interacting(pnp_10p00x10p00_e))

# pnp_05p00x05p00 nodes DERIVATIONS
pnp_05p00x05p00_e = vpnp_e.with_area(24.5.um, 25.5.um).interacting(vpnp_e.edges.with_length(4.8.um, 5.2.um))
pnp_05p00x05p00_b = vpnp_b.interacting(vpnp_b.extents.interacting(pnp_05p00x05p00_e))
pnp_05p00x05p00_c = vpnp_c.interacting(vpnp_c.extents.interacting(pnp_05p00x05p00_e))

# pnp_10p00x00p42 nodes DERIVATIONS
pnp_10p00x00p42_e = vpnp_e.with_area(4.um, 4.5.um).interacting(vpnp_e.edges.with_length(9.8.um, 10.2.um))
pnp_10p00x00p42_b = vpnp_b.interacting(vpnp_b.extents.interacting(pnp_10p00x00p42_e))
pnp_10p00x00p42_c = vpnp_c.interacting(vpnp_c.extents.interacting(pnp_10p00x00p42_e))

# pnp_05p00x00p42 nodes DERIVATIONS
pnp_05p00x00p42_e = vpnp_e.with_area(2.um, 2.2.um).interacting(vpnp_e.edges.with_length(4.8.um, 5.2.um))
pnp_05p00x00p42_b = vpnp_b.interacting(vpnp_b.extents.interacting(pnp_05p00x00p42_e))
pnp_05p00x00p42_c = vpnp_c.interacting(vpnp_c.extents.interacting(pnp_05p00x00p42_e))

#================================
# ----- DIODE DERIVATIONS -------
#================================
logger.info('Starting DIODE DERIVATIONS')

# diode_nd2ps_03v3 diode
diode_nd2ps_03v3_terminal_n = ncomp.not(v5_xtor).not(dualgate).outside(dnwell).interacting(diode_mk)

# diode_nd2ps_03v3_dn diode
diode_nd2ps_03v3_dn_terminal_n = ncomp.not(v5_xtor).not(dualgate).inside(dnwell).interacting(diode_mk)

# diode_nd2ps_06v0 diode
diode_nd2ps_06v0_terminal_n = ncomp.and(dualgate).outside(dnwell).interacting(diode_mk)

# diode_nd2ps_06v0_dn diode
diode_nd2ps_06v0_dn_terminal_n = ncomp.and(dualgate).inside(dnwell).interacting(diode_mk)

# diode_pd2nw_03v3 diode
diode_pd2nw_03v3_terminal_p = pcomp.not(v5_xtor).not(dualgate).outside(dnwell).interacting(diode_mk)

# diode_pd2nw_03v3_dn diode
diode_pd2nw_03v3_dn_terminal_p = pcomp.not(v5_xtor).not(dualgate).inside(dnwell).interacting(diode_mk)

# diode_pd2nw_06v0 diode
diode_pd2nw_06v0_terminal_p = pcomp.and(dualgate).outside(dnwell).interacting(diode_mk)

# diode_pd2nw_06v0_dn diode
diode_pd2nw_06v0_dn_terminal_p = pcomp.and(dualgate).inside(dnwell).interacting(diode_mk)

# diode_nw2ps_03v3 diode
diode_nw2ps_03v3_terminal_p = pcomp.not(v5_xtor).not(dualgate).outside(dnwell).interacting(well_diode_mk)
diode_nw2ps_03v3_terminal_n = well_diode_mk.not(v5_xtor).not(dualgate).covering(nwell)

# diode_nw2ps_06v0 diode
diode_nw2ps_06v0_terminal_p = pcomp.and(dualgate).outside(dnwell).interacting(well_diode_mk)
diode_nw2ps_06v0_terminal_n = well_diode_mk.and(dualgate).covering(nwell)

# diode_pw2dw_03v3 diode
diode_pw2dw_03v3_terminal_p = lvpwell.not(v5_xtor).not(dualgate).interacting(well_diode_mk)

# diode_pw2dw_06v0 diode
diode_pw2dw_06v0_terminal_p = lvpwell.and(dualgate).interacting(well_diode_mk)

# diode_dw2ps_03v3 diode
diode_dw2ps_03v3_terminal_p = ptap.extents.not_interacting(lvpwell).not_covering(v5_xtor)
                                  .not_covering(dualgate).interacting(well_diode_mk)

# diode_dw2ps_06v0 diode
diode_dw2ps_06v0_terminal_p = ptap.extents.not_interacting(lvpwell).covering(dualgate).interacting(well_diode_mk)

# sc_diode diode
sc_diode_terminal_n = ncomp.inside(dnwell).inside(schottky_diode)
sc_diode_terminal_p = metal1.inside(dnwell).not_interacting(sc_diode_terminal_n)

#================================
# ---- RESISTOR DERIVATIONS -----
#================================
logger.info('Starting RESISTOR DERIVATIONS')

# ===============
# --DIFF & WELL--
# ===============

# NPLUS_U
nplus_u_layer     = ncomp.and(lvpwell).and(sab).and(res_mk).not(dnwell)
nplus_cont        = ncomp.outside(nwell).not_interacting(ngate).interacting(res_mk).not(res_mk)

# NPLUS_U_DW
nplus_u_dw_layer = ncomp.and(lvpwell).and(sab).and(res_mk).and(dnwell)

# PPLUS_U
pplus_u_layer = pcomp.and(nwell).and(sab).and(res_mk).not(dnwell)
pplus_cont    = pcomp.inside(nwell).not_interacting(pgate).interacting(res_mk).not(res_mk)

# PPLUS_U_DW
pplus_u_dw_layer = pcomp.and(sab).and(res_mk).and(dnwell)
pplus_dw_cont    = pcomp.not(lvpwell).and(dnwell).not_interacting(pgate).interacting(res_mk).not(res_mk)

# NPLUS_S
nplus_s_layer = ncomp.and(lvpwell).and(res_mk).not_interacting(sab).not(dnwell)

# NPLUS_S_DW
nplus_s_dw_layer = ncomp.and(lvpwell).and(res_mk).and(dnwell).not_interacting(sab)

# PPLUS_S
pplus_s_layer = pcomp.and(nwell).and(res_mk).not_interacting(sab).not(dnwell)

# PPLUS_S_DW
pplus_s_dw_layer = pcomp.not_interacting(sab).and(res_mk).and(dnwell).not_interacting(sab)

# NWELL
nwell_res = nwell.and(res_mk).not(dnwell).not_covering(comp)

# PWELL
pwell_res = lvpwell.and(res_mk).and(dnwell).not_covering(comp)

# ==============
# ---- POLY ----
# ==============

# NPOLYF_U
npolyf_u_layer                = nplus.and(poly2).and(sab).and(res_mk).not(dnwell)

# NPOLYF_U_DW
npolyf_u_dw_layer             = nplus.and(poly2).and(sab).and(res_mk).and(dnwell)

# PPOLYF_U
ppolyf_u_layer                = pplus.and(poly2).and(sab).and(res_mk).not_interacting(resistor).not(dnwell)

# PPOLYF_U_DW
ppolyf_u_dw_layer             = pplus.and(poly2).and(sab).and(res_mk).not_interacting(resistor).and(dnwell)

# NPOLYF_S
npolyf_s_layer                = nplus.and(poly2).and(res_mk).not(dnwell).not_interacting(sab)

# NPOLYF_S_DW
npolyf_s_dw_layer             = nplus.and(poly2).and(res_mk).and(dnwell).not_interacting(sab)

# PPOLYF_S
ppolyf_s_layer                = pplus.and(poly2).and(res_mk).not(dnwell).not_interacting(sab)

# PPOLYF_S_DW
ppolyf_s_dw_layer             = pplus.and(poly2).and(res_mk).and(dnwell).not_interacting(sab)

# ==============
# --H-POLY RES--
# ==============

case POLY_RES
when '1k'

  # PPOLYF_U_1K
  ppolyf_u_1k_layer             = poly2.and(sab).and(res_mk).and(resistor).not(dnwell).not(v5_xtor).not(dualgate)

  # PPOLYF_U_DW_1K
  ppolyf_u_1k_dw_layer          = poly2.and(res_mk).and(dnwell).and(resistor).not(v5_xtor).not(dualgate)

  # PPOLYF_U_1K_6p0
  ppolyf_u_1k_6p0_layer         = poly2.and(sab).and(res_mk).and(resistor).not(dnwell).not(v5_xtor).and(dualgate)

  # PPOLYF_U_DW_1K_6p0
  ppolyf_u_1k_6p0_dw_layer      = poly2.and(res_mk).and(dnwell).and(resistor).not(v5_xtor).and(dualgate)

when '2k'

  # PPOLYF_U_2K
  ppolyf_u_2k_layer             = poly2.and(sab).and(res_mk).and(resistor).not(dnwell).not(v5_xtor).not(dualgate)

  # PPOLYF_U_DW_2K
  ppolyf_u_2k_dw_layer          = poly2.and(res_mk).and(dnwell).and(resistor).not(v5_xtor).not(dualgate)

  # PPOLYF_U_2K_6p0
  ppolyf_u_2k_6p0_layer         = poly2.and(sab).and(res_mk).and(resistor).not(dnwell).not(v5_xtor).and(dualgate)

  # PPOLYF_U_DW_2K_6p0
  ppolyf_u_2k_6p0_dw_layer      = poly2.and(res_mk).and(dnwell).and(resistor).not(v5_xtor).and(dualgate)

when '3k'

  # PPOLYF_U_3K
  ppolyf_u_3k_layer             = poly2.and(sab).and(res_mk).and(resistor).not(dnwell).not(v5_xtor).not(dualgate)

  # PPOLYF_U_DW_3K
  ppolyf_u_3k_dw_layer          = poly2.and(res_mk).and(dnwell).and(resistor).not(v5_xtor).not(dualgate)

  # PPOLYF_U_3K_6p0
  ppolyf_u_3k_6p0_layer         = poly2.and(sab).and(res_mk).and(resistor).not(dnwell).not(v5_xtor).and(dualgate)

  # PPOLYF_U_DW_3K_6p0
  ppolyf_u_3k_6p0_dw_layer      = poly2.and(res_mk).and(dnwell).and(resistor).not(v5_xtor).and(dualgate)

end

# ===============
# ---- METAL ----
# ===============

# Metal1 resistor
rm1_res = metal1.and(metal1_res)

# Metal2 resistor
rm2_res = metal2.and(metal2_res)

# Metal3 resistor
rm3_res = metal3.and(metal3_res)

# Metaltop resistor
tm_res = metaltop.and(metal6_res) if METAL_LEVEL == '6LM'

#==================================
# ------ MIMCAP DERIVATIONS -------
#==================================
logger.info('Starting MIMCAP DERIVATIONS')

# mim option A
mim_virtual = fusetop.sized(1.06.um).and(metal2.interacting(fusetop))
metal2_ncap = metal2_con.not(mim_virtual)
fuse_cap    = fusetop.interacting(cap_mk).interacting(mim_l_mk)

# mim_option B
mimtm_virtual   = fusetop.sized(1.06.um).and(topmin1_metal.interacting(fusetop))

if METAL_LEVEL != '2LM'
  metal3_ncap     = metal3_con.not(mimtm_virtual)
  if METAL_LEVEL != '3LM'
    metal4_ncap     = metal4.not(mimtm_virtual)
    metal5_ncap     = metal5.not(mimtm_virtual) if METAL_LEVEL != '4LM'
  end
end

#==================================
# ------ MOSCAP DERIVATIONS -------
#==================================
logger.info('Starting MOSCAP DERIVATIONS')

# cap_nmos_03v3 capacitor
nmos_gate_3p3 = ngate.not(v5_xtor).not(dualgate).outside(dnwell).interacting(mos_cap_mk)

# cap_nmos_03v3_dn capacitor
nmos_gate_3p3_dw = ngate.not(v5_xtor).not(dualgate).inside(dnwell).interacting(mos_cap_mk)

# cap_pmos_03v3 capacitor
pmos_gate_3p3 = pgate.not(v5_xtor).not(dualgate).outside(dnwell).interacting(mos_cap_mk)

# cap_pmos_03v3_dn capacitor
pmos_gate_3p3_dw = pgate.not(v5_xtor).not(dualgate).inside(dnwell).interacting(mos_cap_mk)

# cap_nmos_06v0 capacitor
nmos_gate_6p0 = ngate.and(dualgate).outside(dnwell).interacting(mos_cap_mk)

# cap_nmos_06v0_dn capacitor
nmos_gate_6p0_dw = ngate.and(dualgate).inside(dnwell).interacting(mos_cap_mk)

# cap_pmos_06v0 capacitor
pmos_gate_6p0 = pgate.and(dualgate).outside(dnwell).interacting(mos_cap_mk)

# cap_pmos_06v0_dn capacitor
pmos_gate_6p0_dw = pgate.and(dualgate).inside(dnwell).interacting(mos_cap_mk)

# cap_nmos_03v3_b capacitor
cap_nmos_03v3_b = ngate.not(v5_xtor).not(dualgate).inside(nwell).interacting(mos_cap_mk)

# cap_pmos_03v3_b capacitor
cap_pmos_03v3_b = pgate.not(v5_xtor).not(dualgate).inside(ptap).interacting(mos_cap_mk)

# cap_nmos_06v0_b capacitor
cap_nmos_06v0_b = ngate.and(dualgate).inside(nwell).interacting(mos_cap_mk)

# cap_pmos_06v0_b capacitor
cap_pmos_06v0_b = pgate.and(dualgate).inside(ptap).interacting(mos_cap_mk)

#================================
# ------ ESD DERIVATIONS --------
#================================
logger.info('Starting MOS SAB DERIVATIONS')

# ==============
# ---- PMOS ----
# ==============
logger.info('Starting PMOS SAB DERIVATIONS')

# 3.3V ESD PMOS transistor outside DNWELL
pgate_sab_3p3v = pgate.not(v5_xtor).not(dualgate).not(dnwell).and(esd_mk).interacting(sab)

# 5V ESD PMOS transistor outside DNWELL
pgate_sab_5v = pgate.and(v5_xtor).and(dualgate).not(dnwell).and(esd_mk).interacting(sab)

# 6V ESD PMOS transistor outside DNWELL
pgate_sab_6v = pgate.not(v5_xtor).and(dualgate).not(dnwell).and(esd_mk).interacting(sab)

# 3.3V ESD PMOS transistor inside DNWELL
pgate_dw_sab_3p3v = pgate_dw.not(v5_xtor).not(dualgate).and(esd_mk).interacting(sab)

# 5V ESD PMOS transistor inside DNWELL
pgate_dw_sab_5v = pgate_dw.and(v5_xtor).and(dualgate).and(esd_mk).interacting(sab)

# 6V ESD PMOS transistor inside DNWELL
pgate_dw_sab_6v = pgate_dw.not(v5_xtor).and(dualgate).and(esd_mk).interacting(sab)

# ==============
# ---- NMOS ----
# ==============
logger.info('Starting NMOS SAB DERIVATIONS')

# 3.3V ESD NMOS transistor outside DNWELL
ngate_sab_3p3v = ngate.not(v5_xtor).not(dualgate).not(dnwell).and(esd_mk).interacting(sab)

# 5V ESD NMOS transistor outside DNWELL
ngate_sab_5v = ngate.and(v5_xtor).and(dualgate).not(dnwell).and(esd_mk).interacting(sab)

# 6V ESD NMOS transistor outside DNWELL
ngate_sab_6v = ngate.not(v5_xtor).and(dualgate).not(dnwell).and(esd_mk).interacting(sab)

# 3.3V ESD NMOS transistor inside DNWELL
ngate_dw_sab_3p3v = ngate_dw.not(v5_xtor).not(dualgate).and(esd_mk).interacting(sab)

# 5V ESD NMOS transistor inside DNWELL
ngate_dw_sab_5v = ngate_dw.and(v5_xtor).and(dualgate).and(esd_mk).interacting(sab)

# 6V ESD NMOS transistor inside DNWELL
ngate_dw_sab_6v = ngate_dw.not(v5_xtor).and(dualgate).and(esd_mk).interacting(sab)

#================================
# ------ EFUSE DERIVATIONS ------
#================================
logger.info('Starting NMOS EFUSE DERIVATIONS')

cathode         = poly2.inside(efuse_mk).not(lvs_source.or(plfuse))
anode           = poly2.and(lvs_source).inside(efuse_mk)
efuse_link      = poly2.and(plfuse).inside(efuse_mk)
efuse_con_layer = cathode | anode

#================================================
#------------ DEVICES CONNECTIVITY --------------
#================================================

logger.info('Starting GF180 LVS connectivity setup')

#================================
# ----- GENERAL CONNECTIONS -----
#================================

logger.info('Starting GF180 LVS connectivity setup (Inter-layer)')

# Inter-layer
connect(sub,          ptap)
connect(lvpwell_con, ptap)
connect(lvpwell_con, ptap_dw)
connect(dnwell, ntap_dw)
connect(nwell_con, ntap)
connect(ptap, contact)
connect(ptap_dw, contact)
connect(ntap, contact)
connect(ntap_dw, contact)
connect(psd, contact)
connect(psd_dw, contact)
connect(nsd, contact)
connect(poly2_con, contact)
connect(contact, metal1_con)
connect(metal1_con, via1)
connect(via1, metal2_ncap)
if METAL_LEVEL != '2LM'
  connect(metal2_ncap, via2)
  connect(via2, metal3_ncap)
  if METAL_LEVEL != '3LM'
    connect(metal3_ncap, via3)
    connect(via3, metal4_ncap)
    if METAL_LEVEL != '4LM'
      connect(metal4_ncap, via4)
      connect(via4, metal5_ncap)
      if METAL_LEVEL != '5LM'
        connect(metal5_ncap, via5)
        connect(via5, metaltop_con)
      end
    end
  end
end

logger.info('Starting GF180 LVS connectivity setup (Attaching labels)')

# Attaching labels
connect(comp, comp_label)
connect(poly2_con, poly2_label)
connect(metal1_con, metal1_label)
connect(metal2_ncap, metal2_label)
if METAL_LEVEL != '2LM'
  connect(metal3_ncap, metal3_label)
  if METAL_LEVEL != '3LM'
    connect(metal4_ncap, metal4_label)
    if METAL_LEVEL != '4LM'
      connect(metal5_ncap, metal5_label)
      connect(metaltop_con, metaltop_label) if METAL_LEVEL != '5LM'
    end
  end
end

logger.info('Starting GF180 LVS connectivity setup (Global)')

# Global
connect_global(sub, substrate_name)

logger.info('Starting GF180 LVS connectivity setup (Multifinger Devices)')

# Multifinger Devices
connect_implicit('*')

#================================
# ----- MOSFET CONNECTIONS ------
#================================
logger.info('Starting LVS MOSFET CONNECTIONS')

connect(psd_dw, contact)

connect(nd_ldmos, contact)
connect(ns_ldmos, contact)

connect(pd_ldmos, contact)
connect(ps_ldmos, contact)

#================================
# ------ BJT CONNECTIONS --------
#================================
logger.info('Starting LVS BJT CONNECTIONS')

# ==============
# ---- vnpn ----
# ==============

# npn_10p00x10p00 nodes connections
connect(npn_10p00x10p00_e, contact)
connect(npn_10p00x10p00_b, contact)
connect(npn_10p00x10p00_c, contact)

# npn_05p00x05p00 nodes connections
connect(npn_05p00x05p00_e, contact)
connect(npn_05p00x05p00_b, contact)
connect(npn_05p00x05p00_c, contact)

# npn_00p54x16p00 nodes connections
connect(npn_00p54x16p00_e, contact)
connect(npn_00p54x16p00_b, contact)
connect(npn_00p54x16p00_c, contact)

# npn_00p54x08p00 nodes connections
connect(npn_00p54x08p00_e, contact)
connect(npn_00p54x08p00_b, contact)
connect(npn_00p54x08p00_c, contact)

# npn_00p54x04p00 nodes connections
connect(npn_00p54x04p00_e, contact)
connect(npn_00p54x04p00_b, contact)
connect(npn_00p54x04p00_c, contact)

# npn_00p54x02p00 nodes connections
connect(npn_00p54x02p00_e, contact)
connect(npn_00p54x02p00_b, contact)
connect(npn_00p54x02p00_c, contact)

# ==============
# ---- vpnp ----
# ==============

# pnp_10p00x10p00 nodes connections
connect(pnp_10p00x10p00_e, contact)
connect(pnp_10p00x10p00_b, contact)
connect(pnp_10p00x10p00_c, contact)

# pnp_05p00x05p00 nodes connections
connect(pnp_05p00x05p00_e, contact)
connect(pnp_05p00x05p00_b, contact)
connect(pnp_05p00x05p00_c, contact)

# pnp_10p00x00p42 nodes connections
connect(pnp_10p00x00p42_e, contact)
connect(pnp_10p00x00p42_b, contact)
connect(pnp_10p00x00p42_c, contact)

# pnp_05p00x00p42 nodes connections
connect(pnp_05p00x00p42_e, contact)
connect(pnp_05p00x00p42_b, contact)
connect(pnp_05p00x00p42_c, contact)

#================================
# ----- DIODE CONNECTIONS -------
#================================

logger.info('Starting LVS DIODE CONNECTIONS')

# diode_nd2ps_03v3 diode
connect(diode_nd2ps_03v3_terminal_n, contact)

# diode_nd2ps_03v3_dn diode
connect(diode_nd2ps_03v3_dn_terminal_n, contact)

# diode_nd2ps_06v0 diode
connect(diode_nd2ps_06v0_terminal_n, contact)

# diode_nd2ps_06v0_dn diode
connect(diode_nd2ps_06v0_dn_terminal_n, contact)

# diode_pd2nw_03v3 diode
connect(diode_pd2nw_03v3_terminal_p, contact)

# diode_pd2nw_03v3_dn diode
connect(diode_pd2nw_03v3_dn_terminal_p, contact)

# diode_pd2nw_06v0 diode
connect(diode_pd2nw_06v0_terminal_p, contact)

# diode_pd2nw_06v0_dn diode
connect(diode_pd2nw_06v0_dn_terminal_p, contact)

# diode_nw2ps_03v3 diode
connect(diode_nw2ps_03v3_terminal_p, contact)
connect(diode_nw2ps_03v3_terminal_n, nwell)

# diode_nw2ps_06v0 diode
connect(diode_nw2ps_06v0_terminal_p, contact)
connect(diode_nw2ps_06v0_terminal_n, nwell)

# diode_pw2dw_03v3 diode
connect(diode_pw2dw_03v3_terminal_p, contact)

# diode_pw2dw_06v0 diode
connect(diode_pw2dw_06v0_terminal_p, contact)

# diode_dw2ps_03v3 diode
connect(diode_dw2ps_03v3_terminal_p, ptap)

# diode_dw2ps_06v0 diode
connect(diode_dw2ps_06v0_terminal_p, ptap)

# sc_diode diode
connect(sc_diode_terminal_n, contact)
connect(sc_diode_terminal_p, schottky_diode)

#================================
# ---- RESISTOR DERIVATIONS -----
#================================

logger.info('Starting LVS RESISTOR CONNECTIONS')

connect(nplus_cont, contact)
connect(pplus_cont, contact)
connect(pplus_dw_cont, contact)

#==================================
# ------ MIMCAP CONNECTIONS -------
#==================================

logger.info('Starting LVS MIMCAP CONNECTIONS')

case MIM_OPTION
when 'A'

  # mim option A
  connect(metal2, mim_virtual)
  connect(fuse_cap, via2)

when 'B'

  # mim_option B
  connect(topmin1_metal, mimtm_virtual)
  connect(fuse_cap, top_via)

end

#================================
# ------ EFUSE CONNECTIONS ------
#================================

logger.info('Starting LVS EFUSE CONNECTIONS')

connect(cathode, contact)
connect(anode, contact)

#================================================
#------------- DEVICES EXTRACTION ---------------
#================================================

logger.info('Starting GF180 LVS DEVICES EXTRACTION')

#================================
# ----- MOSFET EXTRACTION -------
#================================
logger.info('Starting MOSFET EXTRACTION')

# ==============
# ---- PMOS ----
# ==============
logger.info('Starting PMOS EXTRACTION')

# 3.3V PMOS transistor outside DNWELL
logger.info('Extracting 3.3V PMOS transistor outside DNWEL')
extract_devices(mos4('pfet_03v3'),
                { 'SD' => psd, 'G' => pgate_3p3v, 'tS' => psd, 'tD' => psd, 'tG' => poly2_con, 'W' => nwell_con })

# 5V PMOS transistor outside DNWELL
logger.info('Extracting 5V PMOS transistor outside DNWELL')
extract_devices(mos4('pfet_05v0'),
                { 'SD' => psd, 'G' => pgate_5v, 'tS' => psd, 'tD' => psd, 'tG' => poly2_con, 'W' => nwell_con })

# 6V PMOS transistor outside DNWELL
logger.info('Extracting 6V PMOS transistor outside DNWELL')
extract_devices(mos4('pfet_06v0'),
                { 'SD' => psd, 'G' => pgate_6v, 'tS' => psd, 'tD' => psd, 'tG' => poly2_con, 'W' => nwell_con })

# 3.3V PMOS transistor inside DNWELL
logger.info('Extracting 3.3V PMOS transistor inside DNWELL')
extract_devices(mos4('pfet_03v3_dn'),
                { 'SD' => psd_dw, 'G' => pgate_3p3v_dw, 'tS' => psd_dw, 'tD' => psd_dw, 'tG' => poly2_con,
                  'W' => dnwell })

# 5V PMOS transistor inside DNWELL
logger.info('Extracting 5V PMOS transistor inside DNWELL')
extract_devices(mos4('pfet_05v0_dn'),
                { 'SD' => psd_dw, 'G' => pgate_5v_dw, 'tS' => psd_dw, 'tD' => psd_dw, 'tG' => poly2_con,
                  'W' => dnwell })

# 6V PMOS transistor inside DNWELL
logger.info('Extracting 6V PMOS transistor inside DNWELL')
extract_devices(mos4('pfet_06v0_dn'),
                { 'SD' => psd_dw, 'G' => pgate_6v_dw, 'tS' => psd_dw, 'tD' => psd_dw, 'tG' => poly2_con,
                  'W' => dnwell })

# LDPMOS transistor
logger.info('Extracting LDPMOS transistor')
extract_devices(mos4('pfet_10v0_asym'),
                { 'SD' => psd_ldmos, 'G' => pgate_ldmos, 'tS' => ps_ldmos, 'tD' => pd_ldmos, 'tG' => poly2_con,
                  'W' => dnwell })

# ==============
# ---- NMOS ----
# ==============

logger.info('Starting NMOS EXTRACTION')

# 3.3V NMOS transistor outside DNWELL
logger.info('3.3V NMOS transistor outside DNWELL')
extract_devices(mos4('nfet_03v3'),
                { 'SD' => nsd, 'G' => ngate_3p3v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => sub })

# 5V NMOS transistor outside DNWELL
logger.info('5V NMOS transistor outside DNWELL')
extract_devices(mos4('nfet_05v0'),
                { 'SD' => nsd, 'G' => ngate_5v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => sub })

# 6V NMOS transistor outside DNWELL
logger.info('6V NMOS transistor outside DNWELL')
extract_devices(mos4('nfet_06v0'),
                { 'SD' => nsd, 'G' => ngate_6v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => sub })

# 3.3V NMOS transistor inside DNWELL
logger.info('3.3V NMOS transistor inside DNWELL')
extract_devices(mos4('nfet_03v3_dn'),
                { 'SD' => nsd, 'G' => ngate_3p3v_dw, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => lvpwell_con })

# 5V NMOS transistor inside DNWELL
logger.info('5V NMOS transistor inside DNWELL')
extract_devices(mos4('nfet_05v0_dn'),
                { 'SD' => nsd, 'G' => ngate_5v_dw, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => lvpwell_con })

# 6V NMOS transistor inside DNWELL
logger.info('6V NMOS transistor inside DNWELL')
extract_devices(mos4('nfet_06v0_dn'),
                { 'SD' => nsd, 'G' => ngate_6v_dw, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => lvpwell_con })

# Native Vt NMOS transistor
logger.info('Native Vt NMOS transistor')
extract_devices(mos4('nfet_06v0_nvt'),
                { 'SD' => nsd, 'G' => ngate_nat, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => sub })

# LDNMOS transistor
logger.info('Extracting LDNMOS transistor')
extract_devices(mos4('nfet_10v0_asym'),
                { 'SD' => nsd_ldmos, 'G' => ngate_ldmos, 'tS' => ns_ldmos, 'tD' => nd_ldmos, 'tG' => poly2_con,
                  'W' => sub })

#================================
# ------- BJT EXTRACTION --------
#================================
logger.info('Starting BJT EXTRACTION')

# ====================
# ------ vnpn --------
# ====================
logger.info('Starting vnpn BJT EXTRACTION')

# npn_10p00x10p00 BJT
ignore_parameter('npn_10p00x10p00', 'AE')
logger.info('Extracting npn_10p00x10p00 BJT')
extract_devices(bjt4('npn_10p00x10p00'), { 'C' => npn_10p00x10p00_c.extents,
                                           'B' => npn_10p00x10p00_b.extents,
                                           'E' => npn_10p00x10p00_e,
                                           'S' => sub.extents,
                                           'tC' => npn_10p00x10p00_c,
                                           'tB' => npn_10p00x10p00_b,
                                           'tE' => npn_10p00x10p00_e,
                                           'tS' => sub })

# npn_05p00x05p00 BJT
ignore_parameter('npn_05p00x05p00', 'AE')
logger.info('Extracting npn_05p00x05p00 BJT')
extract_devices(bjt4('npn_05p00x05p00'), { 'C' => npn_05p00x05p00_c.extents,
                                           'B' => npn_05p00x05p00_b.extents,
                                           'E' => npn_05p00x05p00_e,
                                           'S' => sub.extents,
                                           'tC' => npn_05p00x05p00_c,
                                           'tB' => npn_05p00x05p00_b,
                                           'tE' => npn_05p00x05p00_e,
                                           'tS' => sub })

# npn_00p54x16p00 BJT
ignore_parameter('npn_00p54x16p00', 'AE')
logger.info('Extracting npn_00p54x16p00 BJT')
extract_devices(bjt4('npn_00p54x16p00'), { 'C' => npn_00p54x16p00_c.extents,
                                           'B' => npn_00p54x16p00_b.extents,
                                           'E' => npn_00p54x16p00_e,
                                           'S' => sub.extents,
                                           'tC' => npn_00p54x16p00_c,
                                           'tB' => npn_00p54x16p00_b,
                                           'tE' => npn_00p54x16p00_e,
                                           'tS' => sub })

# npn_00p54x08p00 BJT
ignore_parameter('npn_00p54x08p00', 'AE')
logger.info('Extracting npn_00p54x08p00 BJT')
extract_devices(bjt4('npn_00p54x08p00'), { 'C' => npn_00p54x08p00_c.extents,
                                           'B' => npn_00p54x08p00_b.extents,
                                           'E' => npn_00p54x08p00_e,
                                           'S' => sub.extents,
                                           'tC' => npn_00p54x08p00_c,
                                           'tB' => npn_00p54x08p00_b,
                                           'tE' => npn_00p54x08p00_e,
                                           'tS' => sub })

# npn_00p54x04p00 BJT
ignore_parameter('npn_00p54x04p00', 'AE')
logger.info('Extracting npn_00p54x04p00 BJT')
extract_devices(bjt4('npn_00p54x04p00'), { 'C' => npn_00p54x04p00_c.extents,
                                           'B' => npn_00p54x04p00_b.extents,
                                           'E' => npn_00p54x04p00_e,
                                           'S' => sub.extents,
                                           'tC' => npn_00p54x04p00_c,
                                           'tB' => npn_00p54x04p00_b,
                                           'tE' => npn_00p54x04p00_e,
                                           'tS' => sub })

# npn_00p54x02p00 BJT
ignore_parameter('npn_00p54x02p00', 'AE')
logger.info('Extracting npn_00p54x02p00 BJT')
extract_devices(bjt4('npn_00p54x02p00'), { 'C' => npn_00p54x02p00_c.extents,
                                           'B' => npn_00p54x02p00_b.extents,
                                           'E' => npn_00p54x02p00_e,
                                           'S' => sub.extents,
                                           'tC' => npn_00p54x02p00_c,
                                           'tB' => npn_00p54x02p00_b,
                                           'tE' => npn_00p54x02p00_e,
                                           'tS' => sub })

# ====================
# ------- vpnp--------
# ====================
logger.info('Starting vpnp BJT EXTRACTION')

# pnp_10p00x10p00 BJT
ignore_parameter('pnp_10p00x10p00', 'AE')
logger.info('Extracting pnp_10p00x10p00 BJT')
extract_devices(bjt3('pnp_10p00x10p00'), { 'C' => pnp_10p00x10p00_c.extents,
                                           'B' => pnp_10p00x10p00_b.extents,
                                           'E' => pnp_10p00x10p00_e,
                                           'tC' => pnp_10p00x10p00_c,
                                           'tB' => pnp_10p00x10p00_b,
                                           'tE' => pnp_10p00x10p00_e })

# pnp_05p00x05p00 BJT
ignore_parameter('pnp_05p00x05p00', 'AE')
logger.info('Extracting pnp_05p00x05p00 BJT')
extract_devices(bjt3('pnp_05p00x05p00'), { 'C' => pnp_05p00x05p00_c.extents,
                                           'B' => pnp_05p00x05p00_b.extents,
                                           'E' => pnp_05p00x05p00_e,
                                           'tC' => pnp_05p00x05p00_c,
                                           'tB' => pnp_05p00x05p00_b,
                                           'tE' => pnp_05p00x05p00_e })

# pnp_10p00x00p42 BJT
ignore_parameter('pnp_10p00x00p42', 'AE')
logger.info('Extracting pnp_10p00x00p42 BJT')
extract_devices(bjt3('pnp_10p00x00p42'), { 'C' => pnp_10p00x00p42_c.extents,
                                           'B' => pnp_10p00x00p42_b.extents,
                                           'E' => pnp_10p00x00p42_e,
                                           'tC' => pnp_10p00x00p42_c,
                                           'tB' => pnp_10p00x00p42_b,
                                           'tE' => pnp_10p00x00p42_e })

# pnp_05p00x00p42 BJT
ignore_parameter('pnp_05p00x00p42', 'AE')
logger.info('Extracting pnp_05p00x00p42 BJT')
extract_devices(bjt3('pnp_05p00x00p42'), { 'C' => pnp_05p00x00p42_c.extents,
                                           'B' => pnp_05p00x00p42_b.extents,
                                           'E' => pnp_05p00x00p42_e,
                                           'tC' => pnp_05p00x00p42_c,
                                           'tB' => pnp_05p00x00p42_b,
                                           'tE' => pnp_05p00x00p42_e })

#================================
# ------ DIODE EXTRACTION -------
#================================
logger.info('Starting DIODE EXTRACTION')

# diode_nd2ps_03v3 diode
logger.info('Extracting diode_nd2ps_03v3 diode')
extract_devices(diode('diode_nd2ps_03v3'), { 'N' => diode_nd2ps_03v3_terminal_n, 'P' => lvpwell_con })

# diode_nd2ps_03v3_dn diode
logger.info('Extracting diode_nd2ps_03v3_dn diode')
extract_devices(diode('diode_nd2ps_03v3_dn'), { 'N' => diode_nd2ps_03v3_dn_terminal_n, 'P' => lvpwell_con })

# diode_nd2ps_06v0 diode
logger.info('Extracting diode_nd2ps_06v0 diode')
extract_devices(diode('diode_nd2ps_06v0'), { 'N' => diode_nd2ps_06v0_terminal_n, 'P' => lvpwell_con })

# diode_nd2ps_06v0_dn diode
logger.info('Extracting diode_nd2ps_06v0_dn diode')
extract_devices(diode('diode_nd2ps_06v0_dn'), { 'N' => diode_nd2ps_06v0_dn_terminal_n, 'P' => lvpwell_con })

# diode_pd2nw_03v3 diode
logger.info('Extracting diode_pd2nw_03v3 diode')
extract_devices(diode('diode_pd2nw_03v3'), { 'N' => nwell_con, 'P' => diode_pd2nw_03v3_terminal_p })

# diode_pd2nw_03v3_dn diode
logger.info('Extractingdiode_pd2nw_03v3_dn diode')
extract_devices(diode('diode_pd2nw_03v3_dn'), { 'N' => nwell_con, 'P' => diode_pd2nw_03v3_dn_terminal_p })

# diode_pd2nw_06v0 diode
logger.info('Extracting diode_pd2nw_06v0 diode')
extract_devices(diode('diode_pd2nw_06v0'), { 'N' => nwell_con, 'P' => diode_pd2nw_06v0_terminal_p })

# diode_pd2nw_06v0_dn diode
logger.info('Extracting diode_pd2nw_06v0_dn diode')
extract_devices(diode('diode_pd2nw_06v0_dn'), { 'N' => nwell_con, 'P' => diode_pd2nw_06v0_dn_terminal_p })

# diode_nw2ps_03v3 diode
logger.info('Extracting diode_nw2ps_03v3 diode')
extract_devices(diode('diode_nw2ps_03v3'), { 'N' => diode_nw2ps_03v3_terminal_n, 'P' => diode_nw2ps_03v3_terminal_p })

# diode_nw2ps_06v0 diode
logger.info('Extracting diode_nw2ps_06v0 diode')
extract_devices(diode('diode_nw2ps_06v0'), { 'N' => diode_nw2ps_06v0_terminal_n, 'P' => diode_nw2ps_06v0_terminal_p })

# diode_pw2dw_03v3 diode
logger.info('Extracting diode_pw2dw_03v3 diode')
extract_devices(diode('diode_pw2dw_03v3'), { 'N' => dnwell, 'P' => diode_pw2dw_03v3_terminal_p })

# diode_pw2dw_06v0 diode
logger.info('Extracting diode_pw2dw_06v0 diode')
extract_devices(diode('diode_pw2dw_06v0'), { 'N' => dnwell, 'P' => diode_pw2dw_06v0_terminal_p })

# diode_dw2ps_03v3 diode
logger.info('Extracting diode_dw2ps_03v3 diode')
extract_devices(diode('diode_dw2ps_03v3'), { 'N' => dnwell, 'P' => diode_dw2ps_03v3_terminal_p })

# diode_dw2ps_06v0 diode
logger.info('Extracting diode_dw2ps_06v0 diode')
extract_devices(diode('diode_dw2ps_06v0'), { 'N' => dnwell, 'P' => diode_dw2ps_06v0_terminal_p })

# sc_diode diode
logger.info('Extracting sc_diode diode')
extract_devices(diode('sc_diode'), { 'N' => sc_diode_terminal_n, 'P' => schottky_diode })

#================================
# ---- RESISTOR EXTRACTIONS -----
#================================
logger.info('Starting RESISTOR EXTRACTION')

# ===============
# --DIFF & WELL--
# ===============

# NPLUS_U
logger.info('Extracting NPLUS_U device')
extract_devices(resistor_with_bulk('nplus_u', 60, BResistor), { 'R' => nplus_u_layer, 'C' => nplus_cont, 'W' => sub })

# NPLUS_U_DW
logger.info('Extracting NPLUS_U_DW device')
extract_devices(resistor_with_bulk('nplus_u_dw', 60, BResistor),
                { 'R' => nplus_u_dw_layer, 'C' => nplus_cont, 'W' => lvpwell_con })

# PPLUS_U
logger.info('Extracting PPLUS_U device')
extract_devices(resistor_with_bulk('pplus_u', 185, BResistor),
                { 'R' => pplus_u_layer, 'C' => pplus_cont, 'W' => nwell_con })

# PPLUS_U_DW
logger.info('Extracting PPLUS_U_DW device')
extract_devices(resistor_with_bulk('pplus_u_dw', 185, BResistor),
                { 'R' => pplus_u_dw_layer, 'C' => pplus_dw_cont, 'W' => dnwell })

# NPLUS_S
logger.info('Extracting NPLUS_S device')
extract_devices(resistor_with_bulk('nplus_s', 6.3, BResistor), { 'R' => nplus_s_layer, 'C' => nplus_cont, 'W' => sub })

# NPLUS_S_DW
logger.info('Extracting NPLUS_S_DW device')
extract_devices(resistor_with_bulk('nplus_s_dw', 6.3, BResistor),
                { 'R' => nplus_s_dw_layer, 'C' => nplus_cont, 'W' => lvpwell_con })

# PPLUS_S
logger.info('Extracting PPLUS_S device')
extract_devices(resistor_with_bulk('pplus_s', 7, BResistor),
                { 'R' => pplus_s_layer, 'C' => pplus_cont, 'W' => nwell_con })

# PPLUS_S_DW
logger.info('Extracting PPLUS_S_DW device')
extract_devices(resistor_with_bulk('pplus_s_dw', 7, BResistor),
                { 'R' => pplus_s_dw_layer, 'C' => pplus_dw_cont, 'W' => dnwell })

# NWELL
logger.info('Extracting NWELL device')
extract_devices(resistor_with_bulk('nwell', 1000, BResistor), { 'R' => nwell_res, 'C' => nwell_con, 'W' => sub })

# PWELL
logger.info('Extracting PWELL device')
extract_devices(resistor_with_bulk('pwell', 1000, BResistor), { 'R' => pwell_res, 'C' => lvpwell_con, 'W' => dnwell })

# ==============
# ---- POLY ----
# ==============

# NPOLYF_U
extract_devices(resistor_with_bulk('npolyf_u', 310, BResistor), { 'R' => npolyf_u_layer, 'C' => poly2_con, 'W' => sub })

# NPOLYF_U_DW
extract_devices(resistor_with_bulk('npolyf_u_dw', 310, BResistor),
                { 'R' => npolyf_u_dw_layer, 'C' => poly2_con, 'W' => dnwell })

# PPOLYF_U
extract_devices(resistor_with_bulk('ppolyf_u', 350, BResistor), { 'R' => ppolyf_u_layer, 'C' => poly2_con, 'W' => sub })

# PPOLYF_U_DW
extract_devices(resistor_with_bulk('ppolyf_u_dw', 350, BResistor),
                { 'R' => ppolyf_u_dw_layer, 'C' => poly2_con, 'W' => dnwell })

# NPOLYF_S
extract_devices(resistor_with_bulk('npolyf_s', 6.8, BResistor), { 'R' => npolyf_s_layer, 'C' => poly2_con, 'W' => sub })

# NPOLYF_S_DW
extract_devices(resistor_with_bulk('npolyf_s_dw', 6.8, BResistor),
                { 'R' => npolyf_s_dw_layer, 'C' => poly2_con, 'W' => dnwell })

# PPOLYF_S
extract_devices(resistor_with_bulk('ppolyf_s', 7.3, BResistor), { 'R' => ppolyf_s_layer, 'C' => poly2_con, 'W' => sub })

# PPOLYF_S_DW
extract_devices(resistor_with_bulk('ppolyf_s_dw', 7.3, BResistor),
                { 'R' => ppolyf_s_dw_layer, 'C' => poly2_con, 'W' => dnwell })

# ==============
# --H-POLY RES--
# ==============

case POLY_RES
when '1k'

  # PPOLYF_U_1K
  extract_devices(resistor_with_bulk('ppolyf_u_1k', 1000, BResistor),
                  { 'R' => ppolyf_u_1k_layer, 'C' => poly2_con, 'W' => sub })

  # PPOLYF_U_DW_1K
  extract_devices(resistor_with_bulk('ppolyf_u_1k_dw', 1000, BResistor),
                  { 'R' => ppolyf_u_1k_dw_layer, 'C' => poly2_con, 'W' => dnwell })

  # PPOLYF_U_1K_6p0
  extract_devices(resistor_with_bulk('ppolyf_u_1k_6p0', 1000, BResistor),
                  { 'R' => ppolyf_u_1k_6p0_layer, 'C' => poly2_con, 'W' => sub })

  # PPOLYF_U_DW_1K_6p0
  extract_devices(resistor_with_bulk('ppolyf_u_1k_6p0_dw', 1000, BResistor),
                  { 'R' => ppolyf_u_1k_6p0_dw_layer, 'C' => poly2_con, 'W' => dnwell })

when '2k'

  # PPOLYF_U_2K
  extract_devices(resistor_with_bulk('ppolyf_u_2k', 2000, BResistor),
                  { 'R' => ppolyf_u_2k_layer, 'C' => poly2_con, 'W' => sub })

  # PPOLYF_U_DW_2K
  extract_devices(resistor_with_bulk('ppolyf_u_2k_dw', 2000, BResistor),
                  { 'R' => ppolyf_u_2k_dw_layer, 'C' => poly2_con, 'W' => dnwell })

  # PPOLYF_U_2K_6p0
  extract_devices(resistor_with_bulk('ppolyf_u_2k_6p0', 2000, BResistor),
                  { 'R' => ppolyf_u_2k_6p0_layer, 'C' => poly2_con, 'W' => sub })

  # PPOLYF_U_DW_2K_6p0
  extract_devices(resistor_with_bulk('ppolyf_u_2k_6p0_dw', 2000, BResistor),
                  { 'R' => ppolyf_u_2k_6p0_dw_layer, 'C' => poly2_con, 'W' => dnwell })

when '3k'

  # PPOLYF_U_3K
  extract_devices(resistor_with_bulk('ppolyf_u_3k', 3000, BResistor),
                  { 'R' => ppolyf_u_3k_layer, 'C' => poly2_con, 'W' => sub })

  # PPOLYF_U_DW_3K
  extract_devices(resistor_with_bulk('ppolyf_u_3k_dw', 3000, BResistor),
                  { 'R' => ppolyf_u_3k_dw_layer, 'C' => poly2_con, 'W' => dnwell })

  # PPOLYF_U_3K_6p0
  extract_devices(resistor_with_bulk('ppolyf_u_3k_6p0', 3000, BResistor),
                  { 'R' => ppolyf_u_3k_6p0_layer, 'C' => poly2_con, 'W' => sub })

  # PPOLYF_U_DW_3K_6p0
  extract_devices(resistor_with_bulk('ppolyf_u_3k_6p0_dw', 3000, BResistor),
                  { 'R' => ppolyf_u_3k_6p0_dw_layer, 'C' => poly2_con, 'W' => dnwell })

end

# ===============
# ---- METAL ----
# ===============

# RM1
logger.info('Extracting RM1 device')
extract_devices(resistor('rm1', 0.09, NResistor), { 'R' => rm1_res, 'C' => metal1_con })

# RM2
logger.info('Extracting RM2 device')
extract_devices(resistor('rm2', 0.09, NResistor), { 'R' => rm2_res, 'C' => metal2_ncap })

# RM3
logger.info('Extracting RM3 device')
extract_devices(resistor('rm3', 0.09, NResistor), { 'R' => rm3_res, 'C' => metal3_ncap })

if METAL_LEVEL == '6LM'
  case METAL_TOP
  when '6K'

    # TM6K
    logger.info('Extracting TM6K device')
    extract_devices(resistor('tm6k', 0.06, NResistor), { 'R' => tm_res, 'C' => metaltop_con })

  when '9K'

    # TM9K
    logger.info('Extracting TM9K device')
    extract_devices(resistor('tm9k', 0.04, NResistor), { 'R' => tm_res, 'C' => metaltop_con })

  when '11K'

    # TM11K
    logger.info('Extracting TM11K device')
    extract_devices(resistor('tm11k', 0.04, NResistor), { 'R' => tm_res, 'C' => metaltop_con })

  when '30K'

    # TM30K
    logger.info('Extracting TM30K device')
    extract_devices(resistor('tm30k', 0.0095, NResistor), { 'R' => tm_res, 'C' => metaltop_con })

  end
end

#==================================
# ------- MIMCAP EXTRACTION -------
#==================================
logger.info('Starting MIMCAP EXTRACTION')

case MIM_OPTION
when 'A'

  case MIM_CAP
  when '1'

    # cap_mim1f0 capacitor
    logger.info('Extracting cap_mim1f0 device')
    extract_devices(capacitor(cap_mim1f0, 1.0e-15, MIMCap), { 'P1' => mim_virtual, 'P2' => fuse_cap })
    tolerance(cap_mim1f0, 'C', relative: 0.25)

  when '1.5'

    # cap_mim1f5 capacitor
    logger.info('Extracting cap_mim1f5 device')
    extract_devices(capacitor(cap_mim1f5, 1.5e-15, MIMCap), { 'P1' => mim_virtual, 'P2' => fuse_cap })
    tolerance(cap_mim1f5, 'C', relative: 0.25)

  when '2'

    # cap_mim2f0 capacitor
    logger.info('Extracting cap_mim2f0 device')
    extract_devices(capacitor(cap_mim2f0, 2.0e-15, MIMCap), { 'P1' => mim_virtual, 'P2' => fuse_cap })
    tolerance(cap_mim2f0, 'C', relative: 0.25)

  end

when 'B'

  case MIM_CAP
  when '1'

    # cap_mim1f0 capacitor
    logger.info('Extracting cap_mim1f0 device')
    extract_devices(capacitor(cap_mim1f0, 1.0e-15, MIMCap), { 'P1' => mimtm_virtual, 'P2' => fuse_cap })
    tolerance(cap_mim1f0, 'C', relative: 0.25)

  when '1.5'

    # cap_mim1f5 capacitor
    logger.info('Extracting cap_mim1f5 device')
    extract_devices(capacitor(cap_mim1f5, 1.5e-15, MIMCap), { 'P1' => mimtm_virtual, 'P2' => fuse_cap })
    tolerance(cap_mim1f5, 'C', relative: 0.25)

  when '2'

    # cap_mim2f0 capacitor
    logger.info('Extracting cap_mim2f0 device')
    extract_devices(capacitor(cap_mim2f0, 2.0e-15, MIMCap), { 'P1' => mimtm_virtual, 'P2' => fuse_cap })
    tolerance(cap_mim2f0, 'C', relative: 0.25)

  end

end

#==================================
# ------- MOSCAP EXTRACTION -------
#==================================
logger.info('Starting MOSCAP EXTRACTION')

# cap_nmos_03v3
logger.info('Extracting cap_nmos_03v3 device')
extract_devices(capacitor('cap_nmos_03v3', 4.4e-15, MosCap),
                { 'P1' => nmos_gate_3p3, 'P2' => lvpwell_con, 'tA' => poly2_con, 'tB' => nsd })

# cap_nmos_03v3_dn
logger.info('Extracting cap_nmos_03v3_dn device')
extract_devices(capacitor('cap_nmos_03v3_dn', 4.4e-15, MosCap),
                { 'P1' => nmos_gate_3p3_dw, 'P2' => lvpwell_con, 'tA' => poly2_con, 'tB' => nsd })

# cap_pmos_03v3
logger.info('Extracting cap_pmos_03v3 device')
extract_devices(capacitor('cap_pmos_03v3', 4.4e-15, MosCap),
                { 'P1' => pmos_gate_3p3, 'P2' => nwell_con, 'tA' => poly2_con, 'tB' => psd })

# cap_pmos_03v3_dn
logger.info('Extracting cap_pmos_03v3_dn device')
extract_devices(capacitor('cap_pmos_03v3_dn', 4.4e-15, MosCap),
                { 'P1' => pmos_gate_3p3_dw, 'P2' => dnwell, 'tA' => poly2_con, 'tB' => psd_dw })

# cap_nmos_06v0
logger.info('Extracting cap_nmos_06v0 device')
extract_devices(capacitor('cap_nmos_06v0', 2.3e-15, MosCap),
                { 'P1' => nmos_gate_6p0, 'P2' => lvpwell_con, 'tA' => poly2_con, 'tB' => nsd })

# cap_nmos_06v0_dn
logger.info('Extracting cap_nmos_06v0_dn device')
extract_devices(capacitor('cap_nmos_06v0_dn', 2.3e-15, MosCap),
                { 'P1' => nmos_gate_6p0_dw, 'P2' => lvpwell_con, 'tA' => poly2_con, 'tB' => nsd })

# cap_pmos_06v0
logger.info('Extracting cap_pmos_06v0 device')
extract_devices(capacitor('cap_pmos_06v0', 2.3e-15, MosCap),
                { 'P1' => pmos_gate_6p0, 'P2' => nwell_con, 'tA' => poly2_con, 'tB' => psd })

# cap_pmos_06v0
logger.info('Extracting cap_pmos_06v0 device')
extract_devices(capacitor('cap_pmos_06v0_dn', 2.3e-15, MosCap),
                { 'P1' => pmos_gate_6p0_dw, 'P2' => dnwell, 'tA' => poly2_con, 'tB' => psd_dw })

# cap_nmos_03v3_b capacitor
extract_devices(capacitor('cap_nmos_03v3_b', 4.4e-15, MosCap),
                { 'P1' => cap_nmos_03v3_b, 'P2' => nwell_con, 'tA' => poly2_con, 'tB' => ntap })

# cap_pmos_03v3_b
logger.info('Extracting cap_pmos_03v3_b device')
extract_devices(capacitor('cap_pmos_03v3_b', 4.4e-15, MosCap),
                { 'P1' => cap_pmos_03v3_b, 'P2' => ptap, 'tA' => poly2_con, 'tB' => ptap })

# cap_nmos_06v0_b
logger.info('Extracting cap_nmos_06v0_b device')
extract_devices(capacitor('cap_nmos_06v0_b', 2.3e-15, MosCap),
                { 'P1' => cap_nmos_06v0_b, 'P2' => nwell_con, 'tA' => poly2_con, 'tB' => ntap })

# cap_pmos_06v0_b
logger.info('Extracting cap_pmos_06v0_b device')
extract_devices(capacitor('cap_pmos_06v0_b', 2.3e-15, MosCap),
                { 'P1' => cap_pmos_06v0_b, 'P2' => ptap, 'tA' => poly2_con, 'tB' => ptap })

#================================
# ------- ESD EXTRACTION --------
#================================
logger.info('Starting MOS SAB EXTRACTION')

# ==============
# ---- PMOS ----
# ==============
logger.info('Starting PMOS SAB EXTRACTION')

# 3.3V ESD PMOS transistor outside DNWELL
logger.info('Extracting 3.3V ESD PMOS transistor outside DNWELL device')
extract_devices(mos4('pfet_03v3_dss'),
                { 'SD' => psd, 'G' => pgate_sab_3p3v, 'tS' => psd, 'tD' => psd, 'tG' => poly2_con, 'W' => nwell_con })

# 5V ESD PMOS transistor outside DNWELL
logger.info('Extracting 5V ESD PMOS transistor outside DNWELL device')
extract_devices(mos4('pfet_05v0_dss'),
                { 'SD' => psd, 'G' => pgate_sab_5v, 'tS' => psd, 'tD' => psd, 'tG' => poly2_con, 'W' => nwell_con })

# 6V ESD PMOS transistor outside DNWELL
logger.info('Extracting 6V ESD PMOS transistor outside DNWELL device')
extract_devices(mos4('pfet_06v0_dss'),
                { 'SD' => psd, 'G' => pgate_sab_6v, 'tS' => psd, 'tD' => psd, 'tG' => poly2_con, 'W' => nwell_con })

# 3.3V ESD PMOS transistor inside DNWELL
logger.info('Extracting 3.3V ESD PMOS transistor inside DNWELL device')
extract_devices(mos4('pfet_03v3_dn_dss'),
                { 'SD' => psd_dw, 'G' => pgate_dw_sab_3p3v, 'tS' => psd_dw, 'tD' => psd_dw, 'tG' => poly2_con,
                  'W' => dnwell })

# 5V ESD PMOS transistor inside DNWELL
logger.info('Extracting 5V ESD PMOS transistor inside DNWELL device')
extract_devices(mos4('pfet_05v0_dn_dss'),
                { 'SD' => psd_dw, 'G' => pgate_dw_sab_5v, 'tS' => psd_dw, 'tD' => psd_dw, 'tG' => poly2_con,
                  'W' => dnwell })

# 6V ESD PMOS transistor inside DNWELL
logger.info('Extracting 6V ESD PMOS transistor inside DNWELL device')
extract_devices(mos4('pfet_06v0_dn_dss'),
                { 'SD' => psd_dw, 'G' => pgate_dw_sab_6v, 'tS' => psd_dw, 'tD' => psd_dw, 'tG' => poly2_con,
                  'W' => dnwell })

# ==============
# ---- NMOS ----
# ==============
logger.info('Starting NMOS SAB EXTRACTION')

# 3.3V ESD NMOS transistor outside DNWELL
logger.info('Extracting 3.3V ESD NMOS transistor outside DNWELL device')
extract_devices(mos4('nfet_03v3_dss'),
                { 'SD' => nsd, 'G' => ngate_sab_3p3v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => sub })

# 5V ESD NMOS transistor outside DNWELL
logger.info('Extracting 5V ESD NMOS transistor outside DNWELL device')
extract_devices(mos4('nfet_05v0_dss'),
                { 'SD' => nsd, 'G' => ngate_sab_5v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => sub })

# 6V ESD NMOS transistor outside DNWELL
logger.info('Extracting 6V ESD NMOS transistor outside DNWELL device')
extract_devices(mos4('nfet_06v0_dss'),
                { 'SD' => nsd, 'G' => ngate_sab_6v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con, 'W' => sub })

# 3.3V ESD NMOS transistor inside DNWELL
logger.info('Extracting 3.3V ESD NMOS transistor inside DNWELL device')
extract_devices(mos4('nfet_03v3_dn_dss'),
                { 'SD' => nsd, 'G' => ngate_dw_sab_3p3v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con,
                  'W' => lvpwell_con })

# 5V ESD NMOS transistor inside DNWELL
logger.info('Extracting 5V ESD NMOS transistor inside DNWELL device')
extract_devices(mos4('nfet_05v0_dn_dss'),
                { 'SD' => nsd, 'G' => ngate_dw_sab_5v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con,
                  'W' => lvpwell_con })

# 6V ESD NMOS transistor inside DNWELL
logger.info('Extracting 6V ESD NMOS transistor inside DNWELL device')
extract_devices(mos4('nfet_06v0_dn_dss'),
                { 'SD' => nsd, 'G' => ngate_dw_sab_6v, 'tS' => nsd, 'tD' => nsd, 'tG' => poly2_con,
                  'W' => lvpwell_con })

#================================
# ------ EFUSE EXTRACTIONS ------
#================================
logger.info('Starting EFUSE EXTRACTION')

extract_devices(resistor('efuse', 28.5714),
                { 'R' => efuse_link, 'C' => efuse_con_layer, 'tA' => anode, 'tB' => cathode })
ignore_parameter('efuse', 'R')

#================================================
#------------- COMPARISON OPTIONS ---------------
#================================================

logger.info('Starting GF180 LVS comparison section')

#=== FLATTEN CELLS ===
align

#=== NETLIST EXTRACTION ===
netlist.simplify if SIMPLIFY

#=== NETLIST OPTIONS ===
netlist if NET_ONLY

netlist.make_top_level_pins if TOP_LVL_PINS

netlist.combine_devices if COMBINE

netlist.purge if PURGE

netlist.purge_nets if PURGE_NETS

#=== SCHEMATIC OPTIONS ===
schematic.simplify if SCH_SIMPLE

#=== IGNORE EXTREME VALUES ===
max_res(1e7)
min_caps(1e-16)

compare

exec_end_time = Time.now
run_time = exec_end_time - exec_start_time
logger.info(format('LVS Total Run time %f seconds', run_time))

if !compare
  logger.info('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
  logger.error("ERROR : Netlists don't match")
  logger.info('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
else
  logger.info('==========================================')
  logger.info('INFO : Congratulations! Netlists match.')
  logger.info('==========================================')
end
